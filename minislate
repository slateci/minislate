#!/usr/bin/env python

from __future__ import print_function
from random import randint
from shlex import split
import subprocess
import argparse
import sys
import os

KUBEVER = 'v1.14.0'

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(title="commands", dest="c1")
init = subparsers.add_parser('init', help='initialize minislate containers')
init.add_argument('-p', '--port', '--publish', dest='ports', action='append', nargs='?',
                  metavar='hostPort or hostPort:containerPort', help='Example: `./minislate init -p 3000`')
init.add_argument('-v', '--volume', dest='volumes', action='append', nargs='?',
                  metavar='hostDir or hostDir:containerDir', help='Example: `./minislate init -v ~/workdir`')
subparsers.add_parser('pause', help='pause minislate containers')
subparsers.add_parser('unpause', help='unpause minislate containers')
destroy = subparsers.add_parser('destroy', help='completely destroy environment')
destroy.add_argument('--rmi', dest='rmi', action='store_true', help='Example: `./minislate destroy --rmi`')
destroy.add_argument('-y', dest='confirm', action='store_true', help='Example: `./minislate destroy -y`')
subparsers.add_parser('status', help='view status of minislate containers')
test = subparsers.add_parser('test', help='run test of the minislate environment')
test.add_argument('--debug', dest='debug', action='store_true', help='Example: `./minislate test --debug`')
test.add_argument('--kill', dest='kill', action='store_true', help='Example: `./minislate test --kill`')
build = subparsers.add_parser('build', help='build/rebuild container images')
build.add_argument('c2', metavar='container', nargs='?', choices=[
                   'kube', 'slate', 'db', 'nfs'], help='Example: `./minislate build slate`')
shell = subparsers.add_parser(
    'shell', help='open a shell in a minislate container')
shell.add_argument('c2', metavar='container', choices=[
                   'kube', 'slate', 'db', 'nfs'], help='Example: `./minislate shell slate`')
slate = subparsers.add_parser('slate', help='run a slate command')
slate.add_argument('c2', metavar='command', nargs=argparse.REMAINDER,
                   help='Example: `./minislate slate group list`')
kubectl = subparsers.add_parser('kubectl', help='run a kubectl command')
kubectl.add_argument('c2', metavar='command', nargs=argparse.REMAINDER,
                     help='Example: `./minislate kubectl get po --all-namespaces`')
exec_ = subparsers.add_parser('exec', help='wrapper of "docker-compose exec"')
exec_.add_argument('c2', metavar='command', nargs=argparse.REMAINDER,
                   help='Example: `./minislate exec kube ip addr`')
subparsers.add_parser('reload-catalog', help='reload production slate catalog')
proxy = subparsers.add_parser('proxy', help='proxy an internal socket address to the host')
proxygroup = proxy.add_mutually_exclusive_group()
proxygroup.add_argument('--list', dest='list', action='store_true', help='Example: `./minislate proxy list`')
proxygroup.add_argument('--rm', metavar='pid', dest='pid', nargs='?', help='remove a proxy already in place by its PID')
proxygroup.add_argument('address', metavar='address', nargs='?', help='socket address in kube container, likely a load balancer')
gui = subparsers.add_parser('portal', help='open the slate web interface for minislate')
args = parser.parse_args()

try:
  from subprocess import DEVNULL  # py3k
except ImportError:
    DEVNULL = open(os.devnull, 'wb')

def exception_handler(exception_type, exception, traceback):
    print(exception)

sys.excepthook = exception_handler

def initcheck(initerr='MiniSLATE is not initialized. Run: `./minislate init`'):
    if not os.path.isfile('docker-compose.yml'):
        raise EnvironmentError(initerr)


def readycheck(rdyerr='MiniSLATE has non-ready containers. Is the environment paused?'):
  try:
    subprocess.check_call(split(
        '/bin/sh -c "docker-compose ps | grep Up"'), stdout=DEVNULL, close_fds=True)
  except subprocess.CalledProcessError:
    raise EnvironmentError(rdyerr)


def run(cmd):
  return subprocess.call(split(cmd))


def testkill():
  run('docker-compose -f docker-compose-test.yml kill -s SIGKILL test')
  run('docker-compose -f docker-compose-test.yml down -v')
  try:
    os.remove('docker-compose.yml')
  except OSError:
    pass

if args.c1 == 'init':
    if os.path.isfile('docker-compose.yml'):
        raise EnvironmentError(
            'MiniSLATE is already initialized. Run `./minislate destroy && ./minislate init` to reset your environment.')
    ports = []
    volumes = []
    if args.ports:
        for item in args.ports:
            ports.append('      - ' + item)
    if args.volumes:
        for item in args.volumes:
            if ':' not in item:
              item = item + ':/mnt/' + os.path.basename(item)
            volumes.append('      - ' + item)
    ports = '\n'.join(ports)
    volumes = '\n'.join(volumes)
    with open('docker-compose.yml.tmpl', 'r') as file:
        contents = file.read()
    contents = contents.replace('# {PORTS}', ports)
    contents = contents.replace('# {VOLUMES}', volumes)
    with open('docker-compose.yml', 'w') as file:
        file.write(contents)
        file.flush()
        os.fsync(file)
    try:
      run('docker-compose -v')
    except:
      raise EnvironmentError('Could not run docker-compose. Is it installed?')
    if(run('docker-compose up -d') == 0):
      if(run('docker-compose exec kube ./init.sh') == 0 and run('docker-compose exec slate ./init.sh') == 0):
        if volumes:
          print('\033[1m'+"Volume Mounts:"+'\033[0m'+'\n'+volumes)
        print('\n'+'\033[1m'+"DONE! MiniSLATE is now initialized."+'\033[0m')
elif args.c1 == 'pause':
  initcheck()
  readycheck(rdyerr='It appears MiniSLATE is already paused.')
  run('docker-compose pause')
elif args.c1 == 'unpause':
  initcheck()
  try:
    subprocess.check_call(split(
        '/bin/sh -c "docker-compose ps | grep Paused"'), stdout=DEVNULL, close_fds=True)
  except subprocess.CalledProcessError:
    raise EnvironmentError('MiniSLATE is not paused.')
  run('docker-compose unpause')
elif args.c1 == 'destroy':
    initcheck()
    try:
        input = raw_input
    except NameError:
        pass
    yes = {'yes','y','ye'}
    choice = ''
    if not args.confirm:
        print("Are you sure you'd like to completely destroy your MiniSLATE environment? (y/N) ", end='')
        choice = input().lower()
    if choice in yes or args.confirm:
        run('docker-compose kill -s SIGKILL kube')
        if args.rmi:
            run('docker-compose down -v --rmi local')
        else:
            run('docker-compose down -v')
        try:
            os.remove('docker-compose.yml')
        except OSError:
            pass
elif args.c1 == 'build':
  args.c2 = args.c2 or ''
  print('WARNING Building locally can take more than 15 minutes')
  print('It is reccomended to use hosted images by running ./minislate init')
  if (args.c2 == 'kube'):
    print('Building the kube container...')
    run('docker build . --file=kube/Dockerfile --tag=slateci/ms-kube')
    print('miniSLATE kube container built successfully')
  elif (args.c2 == 'slate'):
    print('Building the slate container...')
    run('docker build . --file=slate/Dockerfile --tag=slateci/ms-slate')
    print('miniSLATE slate container built successfully')
  else: 
    print('Building the kube container...')
    run('docker build . --file=kube/Dockerfile --tag=slateci/ms-kube')
    print('Building the slate container...')
    run('docker build . --file=slate/Dockerfile --tag=slateci/ms-slate')
    print('MiniSLATE build complete run `./minislate init` to initialize locally built images')
elif args.c1 == 'shell':
  initcheck()
  readycheck()
  run('docker-compose exec ' + args.c2 + ' /bin/bash')
elif args.c1 == 'status':
  initcheck()
  run('docker-compose ps')
elif args.c1 == 'test':
  if args.kill:
    testkill()
  else:
    if os.path.isfile('docker-compose.yml'):
      raise EnvironmentError("Can not run tests on existing environment. Please destroy your environment to run tests.")
    run('docker-compose -f docker-compose-test.yml up -d --build')
    run('docker-compose -f docker-compose-test.yml exec test /minislate/minislate init')
    result = run('docker-compose -f docker-compose-test.yml exec test /minislate/test/test')
    if args.debug:
      print('Entering debug mode...')
      print('Exiting this shell will destroy the test environment')
      run('docker-compose -f docker-compose-test.yml exec test /bin/sh')
    testkill()
    sys.exit(result)
elif args.c1 == 'slate':
  initcheck()
  readycheck()
  c2 = ' '.join(args.c2)
  run('docker-compose exec slate slate ' + c2)
elif args.c1 == 'kubectl':
  initcheck()
  readycheck()
  c2 = ' '.join(args.c2)
  run('docker-compose exec slate kubectl ' + c2)
elif args.c1 == 'exec':
  initcheck()
  readycheck()
  c2 = ' '.join(args.c2)
  run('docker-compose exec ' + c2)
elif args.c1 == 'reload-catalog':
  initcheck()
  readycheck()
  if(run('docker-compose exec slate sh -c "curl --fail -X POST $(cat ~/.slate/endpoint)/v1alpha3/update_apps?token=$(cat ~/.slate/token)"') == 0):
    print("SLATE Catalog has been reloaded.")
  else:
    print("SLATE Catalog reload failed.")
elif args.c1 == 'proxy':
  if args.pid:
    run('docker-compose exec kube kill '+args.pid)
  elif args.list:
    listing = "No proxies found"
    try:
      listing = subprocess.check_output(split('docker-compose exec kube /bin/sh -c "ps --headers a o pid,cmd | grep -E \'socat|PID\' | grep -E \'while|PID\' | grep -v grep"'))
    except subprocess.CalledProcessError:
      pass
    print(listing)
  else:
    initcheck()
    readycheck()
    exitcode = 0
    port = 0
    while(exitcode < 1):
      port = str(randint(30100,30201))
      exitcode = run('docker-compose exec kube lsof -i :'+ port)
    run('docker-compose exec -d kube /bin/sh -c "while true; do socat TCP-LISTEN:'+port+' TCP:'+args.address+'; done"')
    print(args.address+' is now accessible at localhost:'+port+' on your host')
elif args.c1 == 'portal':
    dashboardurl="http://localhost:5000/dashboard"
    success=False
    for launcher in ["xdg-open","open"]:
        try:
            result=subprocess.call([launcher,dashboardurl])
            if result==0:
                success=True
                break
        except OSError:
            pass # let loop continue
    if not success:
        print("Unable to open the dashboard automatically.")
        print("You can open "+dashboardurl+" in your web browser manually.")
else:
  args.c1 = args.c1 or ''
  raise ValueError('Invalid argument: ' + args.c1)
